plugins {
    id 'com.craigburke.client-dependencies' version '1.4.0'
}

dependencies {
    implementation project(':bintray-checker-server')

    providedCompile 'javax.servlet:javax.servlet-api:3.+'
    providedCompile 'javax.servlet.jsp:jsp-api:2.1'

    testImplementation 'junit:junit:4.12'
}

eclipse {
    wtp {
        component {
            contextPath = '/'
            deployName = 'bintray-checker'
            resource deployPath: '/', sourcePath: 'src/main/webapp'
            resource deployPath: '/client', sourcePath: 'src/assets/vendor'
            resource deployPath: '/', sourcePath: 'build/static'
            resource deployPath: '/', sourcePath: 'res-nohash'
        }
    }
}
eclipse.classpath.file {
    withXml {
        def node = it.asNode()
        node.appendNode('classpathentry', [kind: 'src', output: 'bin/main', path: 'logging/devel'])
        node.appendNode('classpathentry', [kind: 'src', output: 'bin/main', path: 'config/devel'])
    }
    // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
    withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
    }
}

def commonWarDefs = {
    from ('src/assets/vendor') {
        into 'client'
    }
    from 'build/static'
    from 'res-nohash'
}

war {
    classifier = 'production'
    configure commonWarDefs
}

task testingWar (type: War) {
    classifier = 'testing'
    configure commonWarDefs
}

[war, testingWar].each { task ->
    task.dependsOn ':bintray-checker-server:clientInstall'
    task.dependsOn ':bintray-checker-server:generateFavicons'
    task.from ('logging/' + task.archiveClassifier.get()) {
        into('WEB-INF/classes')
        include "**/*"
    }
    task.from ('config/' + task.archiveClassifier.get()) {
        into('WEB-INF/classes')
        include "**/*"
    }
}
